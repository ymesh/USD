#usda 1.0
(
    "WARNING: THIS FILE IS GENERATED BY usdGenSchema.  DO NOT EDIT."
    customLayerData = {
        dictionary multipleApplyAPISchemas = {
            string TestMultiApplyAPI = "multi"
            string TestMultiCanApplyAPI = "multi"
        }
    }
)

class "TestMultiApplyAPI" (
    doc = "Test multi-apply API schema"
)
{
    uniform bool bool_attr = 1 (
        doc = "Boolean attribute"
    )
    rel relationship (
        doc = "Relationship"
    )
    uniform token token_attr = "foo" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = "Token attribute"
    )
}

class "TestSingleApplyAPI" (
    doc = "Test single apply API schema"
)
{
    uniform bool single:bool_attr = 1 (
        doc = "Boolean attribute"
    )
    rel single:relationship (
        doc = "Relationship"
    )
    uniform token single:token_attr = "bar" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = "Token attribute"
    )
}

class "TestSingleCanApplyAPI" (
    doc = "Test single apply API schema"
)
{
    uniform bool singleCan:bool_attr = 1 (
        doc = "Boolean attribute"
    )
    rel singleCan:relationship (
        doc = "Relationship"
    )
    uniform token singleCan:token_attr = "bar" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = "Token attribute"
    )
}

class "TestMultiCanApplyAPI" (
    doc = "Test multi-apply API schema"
)
{
    uniform bool bool_attr = 1 (
        doc = "Boolean attribute"
    )
    rel relationship (
        doc = "Relationship"
    )
    uniform token token_attr = "foo" (
        allowedTokens = ["foo", "bar", "baz"]
        doc = "Token attribute"
    )
}

class TestTypedSchema "TestTypedSchema" (
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestWithFallbackAppliedSchema "TestWithFallbackAppliedSchema" (
    apiSchemas = ["TestSingleApplyAPI", "TestMultiApplyAPI:fallback"]
    doc = "Test with fallback API schemas"
    hidden = false
)
{
    uniform bool multi:fallback:bool_attr = 0 (
        doc = "Override bool_attr from TestMultiApplyAPI:fallback"
    )
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestTypedSchemaForAutoApply "TestTypedSchemaForAutoApply" (
    apiSchemas = ["TestMultiApplyAPI:fallback"]
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestTypedSchemaForAutoApplyConcreteBase "TestTypedSchemaForAutoApplyConcreteBase" (
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestDerivedTypedSchemaForAutoApplyConcreteBase "TestDerivedTypedSchemaForAutoApplyConcreteBase" (
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class "TestTypedSchemaForAutoApplyAbstractBase" (
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

class TestDerivedTypedSchemaForAutoApplyAbstractBase "TestDerivedTypedSchemaForAutoApplyAbstractBase" (
    doc = "Testing typed schema"
    hidden = true
)
{
    string testAttr = "foo" (
        allowedTokens = ["bar", "baz"]
        doc = "Testing documentation metadata"
    )
    rel testRel (
        displayGroup = "Display Group"
        doc = "Testing documentation metadata"
    )
}

